---
- name: Configure all Droplets and init Docker Swarm
  hosts: all
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 3600   # Set cache validity time to one hour

    - name: Install docker.io
      apt:
        name: docker.io
        state: present

- name: Configure manager Droplet
  hosts: manager
  tasks:
    - name: Install docker compose
      apt:
        name: docker-compose-v2
        state: present

    - name: Allow necessary ports in UFW
      become: yes
      ufw:
        rule: allow
        port: "{{ item.split('/')[0] }}"   # Extract port number from the item
        proto: "{{ item.split('/')[1] }}"  # Extract protocol from the item
        state: enabled
      with_items:
        - "22/tcp" # SSH
        - "2376/tcp"
        - "2377/tcp"
        - "7946/udp"
        - "7946/tcp"
        - "4789/udp"

    - name: Sync remote_files folder (pushes files to the remote server)
      ansible.posix.synchronize:
        src: ../remote_files # path relative this the playbook
        dest: /

    # MIDLERTIDIG START -->
    - name: Simulate vagrant_prom_data (fix migration)
      file:
        path: /remote_files/vagrant_prom_data
        state: directory

    - name: Simulate vagrant_grafana_storage (fix migration)
      file:
        path: /remote_files/vagrant_grafana_storage
        state: directory
    # <-- MIDLERTIDIG SLUT
    
    - name: Restart Docker service
      systemd:
        name: docker
        state: restarted

    - name: Check if Docker Swarm is initialized
      shell: docker info --format '{{ '{{' }} .Swarm.LocalNodeState {{ '}}' }}'
      register: swarm_info

    - name: Initialize Docker Swarm
      shell: docker swarm init --advertise-addr {{ ansible_host }}
      register: swarm_init_output
      when: swarm_info.stdout != "active"

    - name: Extract Swarm Join Token
      shell: docker swarm join-token worker -q
      register: swarm_join_token
      tags: join

    - set_fact:
        SWARM_JOIN_TOKEN: "{{ swarm_join_token.stdout }}"
        SWARM_MANAGER_IP: "{{ ansible_host }}"
      tags: join


- name: Join Docker Swarm as Worker
  hosts: workers
  tasks:
    - name: Join Docker Swarm as Worker
      shell: docker swarm join --token '{{ hostvars['swarm-manager']['SWARM_JOIN_TOKEN'] }}' {{ hostvars['swarm-manager']['SWARM_MANAGER_IP'] }}:2377
      register: swarm_join_output
      failed_when: swarm_join_output.failed and ('This node is already part of a swarm.' not in swarm_join_output.stderr)
      tags: join
    
    # MIDLERTIDIG START -->
    - name: Ensure the /data directory exists
      file:
        path: /data
        state: directory
        
    - name: Copy connstring to testdb to the remote server
      copy:
        src: /tmp/connstring.txt
        dest: /data/connstring.txt
      tags: testdb
    # <-- MIDLERITIDIG SLUT
