---
- name: Provision DigitalOcean Droplets
  hosts: localhost
  connection: local
  gather_facts: no
  vars:
    DIGITAL_OCEAN_TOKEN: "{{ lookup('env', 'TEST_DIGITAL_OCEAN_TOKEN') }}"
    FINGER_PRINT: "{{ lookup('env', 'FINGER_PRINT') }}"
  tasks:
    - name: Create DigitalOcean Manager Droplet
      digital_ocean_droplet:
        state: present
        name: "swarm-manager"
        unique_name: true
        region: "fra1"
        size: "s-1vcpu-1gb"
        image: "ubuntu-20-04-x64"
        ssh_keys: [ '{{ FINGER_PRINT }}' ]
        api_token: "{{ DIGITAL_OCEAN_TOKEN }}"
      register: manager_created

    - name: Create DigitalOcean Worker Droplets
      digital_ocean_droplet:
        state: present
        name: "{{ item }}"
        unique_name: true
        region: "fra1"
        size: "s-1vcpu-1gb"
        image: "ubuntu-20-04-x64"
        ssh_keys: [ '{{ FINGER_PRINT }}' ]
        api_token: "{{ DIGITAL_OCEAN_TOKEN }}"
      loop:
        - "worker1"
        - "worker2"
      register: workers_created

    - name: Generate inventory file
      template:
        src: inventory_template.ini.j2
        dest: inventory.ini
      vars:
        manager: "{{ manager_created.data.droplet }}"
        workers: "{{ workers_created.results | map(attribute='data.droplet') | list }}"

- name: Configure all Droplets
  hosts: all
  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 3600   # Set cache validity time to one hour

    - name: Install necessary packages
      apt:
        name: "{{ item }}"
        state: present
      loop:
        - docker.io

- name: Configure manager Droplet
  hosts: manager
  tasks:
    - name: Install docker compose
      apt:
        name: docker-compose-v2
        state: present

    - name: Allow necessary ports in UFW
      become: yes
      ufw:
        rule: allow
        port: "{{ item.split('/')[0] }}"   # Extract port number from the item
        proto: "{{ item.split('/')[1] }}"  # Extract protocol from the item
        state: enabled
      with_items:
        - "22/tcp" # SSH
        - "2376/tcp"
        - "2377/tcp"
        - "7946/udp"
        - "7946/tcp"
        - "4789/udp"

    # MIDLERTIDIG START -->
    - name: Sync remote_files folder (pushes files to the remote server)
      ansible.posix.synchronize:
        src: ../remote_files # path relative this the playbook
        dest: /

    - name: Simulate vagrant_prom_data (fix migration)
      file:
        path: /remote_files/vagrant_prom_data
        state: directory
    
    # <-- MIDLERTIDIG SLUT
    
    - name: Restart Docker service
      systemd:
        name: docker
        state: restarted

    - name: Initialize Docker Swarm
      shell: docker swarm init --advertise-addr {{ ansible_host }}
      register: swarm_init_output
      failed_when: swarm_init_output.failed and swarm_init_output.changed

    - name: Extract Swarm Join Token
      shell: docker swarm join-token worker -q
      register: swarm_join_token

    - set_fact:
        SWARM_JOIN_TOKEN: "{{ swarm_join_token.stdout }}"
        SWARM_MANAGER_IP: "{{ ansible_host }}"


- name: Join Docker Swarm as Worker
  hosts: workers
  tasks:
    - name: Join Docker Swarm as Worker
      shell: docker swarm join --token '{{ hostvars['swarm-manager']['SWARM_JOIN_TOKEN'] }}' {{ hostvars['swarm-manager']['SWARM_MANAGER_IP'] }}:2377
      register: swarm_join_output
      failed_when: swarm_join_output.failed and swarm_join_output.changed
    
    # MIDLERTIDIG START -->
    - name: Ensure the directory exists
      file:
        path: /data
        state: directory
        
    - name: Sync secret file "just the test!" (pushes files to the remote server)
      copy:
        src: /tmp/connstring.txt
        dest: /data/connstring.txt
    
    # <-- MIDLERITIDIG SLUT
